{
	"Firebase Function": {
		"scope": "typescript",
		"prefix": "firebaseFunction",
		"body": [
			"import { AuthData } from 'firebase-functions/lib/common/providers/tasks';",
			"import { checkPrerequirements } from '../utils/checkPrerequirements';",
			"import { DatabaseType } from '../utils/DatabaseType';",
			"import { FiatShamirParameters } from '../utils/fiatShamir';",
			"import { FirebaseFunction } from '../utils/FirebaseFunction';",
			"import { Logger } from '../utils/Logger';",
			"import { ParameterContainer } from '../utils/ParameterContainer';",
			"import { ParameterParser } from '../utils/ParameterParser';",
			"",
			"export class $1Function implements FirebaseFunction<",
			"\t$1Function.Parameters,",
			"\t$1Function.ReturnType",
			"> {",
			"",
			"\tpublic parameters: $1Function.Parameters;",
			"",
			"\tprivate logger: Logger;",
			"",
			"\tpublic constructor(data: any, auth: AuthData | undefined) {",
			"\t\tthis.logger = Logger.start(!!data.verbose, '$1Function.constructor', { data, auth }, 'notice');",
			"\t\tconst parameterContainer = new ParameterContainer(data, this.logger.nextIndent);",
			"\t\tconst parameterParser = new ParameterParser<$1Function.Parameters>(",
			"\t\t\t{",
			"\t\t\t\tfiatShamirParameters: ['object', FiatShamirParameters.fromObject],",
			"\t\t\t\tdatabaseType: ['string', DatabaseType.fromString]",
			"\t\t\t},",
			"\t\t\tthis.logger.nextIndent",
			"\t\t);",
			"\t\tparameterParser.parseParameters(parameterContainer);",
			"\t\tthis.parameters = parameterParser.parameters;",
			"\t}",
			"",
			"\tpublic async executeFunction(): Promise<$1Function.ReturnType> {",
			"\t\tthis.logger.append('$1Function.executeFunction', {}, 'info');",
			"\t\tawait checkPrerequirements(this.parameters, this.logger.nextIndent, ${2:'notRequired'}); ",
			"\t}",
			"}",
			"",
			"export namespace $1Function {",
			"\texport type Parameters = FirebaseFunction.DefaultParameters & {",
			"\t\t$3",
			"\t}",
			"",
			"\texport type ReturnType = $4;",
			"}",
			""
		],
		"description": "Create a new firebase function."
	}
}