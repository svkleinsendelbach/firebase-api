{
	"Firebase Function": {
		"scope": "typescript",
		"prefix": "firebaseFunction",
		"body": [
			"import { type DatabaseType, type IFirebaseFunction, type ILogger, ParameterParser, type IFunctionType, IParameterContainer, IDatabaseReference } from 'firebase-function';",
			"import { type AuthData } from 'firebase-functions/lib/common/providers/tasks';",
			"import { DatabaseScheme } from '../DatabaseScheme';",
			"",
			"export class $1Function implements IFirebaseFunction<$1FunctionType> {",
			"	public readonly parameters: IFunctionType.Parameters<$1FunctionType> & { databaseType: DatabaseType };",
			"",
			"	public constructor(",
			"		parameterContainer: IParameterContainer,",
			"		private readonly auth: AuthData | null,",
			"		private readonly databaseReference: IDatabaseReference<DatabaseScheme>,",
			"		private readonly logger: ILogger",
			"	) {",
			"		this.logger.log('$1Function.constructor', { auth: auth }, 'notice');",
			"		const parameterParser = new ParameterParser<IFunctionType.Parameters<$1FunctionType>>(",
			"			{",
			"				",
			"			},",
			"			this.logger.nextIndent",
			"		);",
			"		parameterParser.parse(parameterContainer);",
			"		this.parameters = parameterParser.parameters;",
			"	}",
			"",
			"	public async execute(): Promise<IFunctionType.ReturnType<$1FunctionType>> {",
			"		this.logger.log('$1Function.execute', {}, 'info');"
			"		",
			"	}",
			"}",
			"",
			"export type $1FunctionType = IFunctionType<{",
			"	",
			"}, void>;",
			"",
		],
		"description": "Create a new firebase function."
	}
}