{
	"Firebase Function": {
		"scope": "typescript",
		"prefix": "firebaseFunction",
		"body": [
			"import { type DatabaseType, type FirebaseFunction, type ILogger, ParameterBuilder, ParameterContainer, ParameterParser } from 'firebase-function';",
			"import { type AuthData } from 'firebase-functions/lib/common/providers/tasks';",
			"import { getCryptionKeys } from '../privateKeys';",
			"",
			"export class $1Function implements FirebaseFunction<$1Function.Parameters, $1Function.ReturnType> {",
			"\tpublic readonly parameters: $1Function.Parameters & { databaseType: DatabaseType };",
			"",
			"\tpublic constructor(data: Record<string, unknown> & { databaseType: DatabaseType }, auth: AuthData | undefined, private readonly logger: ILogger) {",
			"\t\tthis.logger.log('$1Function.constructor', { data: data, auth: auth }, 'notice');",
			"\t\tconst parameterContainer = new ParameterContainer(data, getCryptionKeys, this.logger.nextIndent);",
			"\t\tconst parameterParser = new ParameterParser<$1Function.Parameters>(",
			"\t\t\t{",
			"\t\t\t},",
			"\t\t\tthis.logger.nextIndent",
			"\t\t);",
			"\t\tparameterParser.parseParameters(parameterContainer);",
			"\t\tthis.parameters = parameterParser.parameters;",
			"\t}",
			"",
			"\tpublic async executeFunction(): Promise<$1Function.ReturnType> {",
			"\t\tthis.logger.log('$1Function.executeFunction', {}, 'info');",
			"\t}",
			"}",
			"",
			"export namespace $1Function {",
			"\texport type Parameters = {",
			"\t};",
			"",
			"\texport type ReturnType = void;",
			"}",
			""
		],
		"description": "Create a new firebase function."
	}
}