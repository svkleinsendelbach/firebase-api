{
	"Firebase Function": {
		"scope": "typescript",
		"prefix": "firebaseFunction",
		"body": [
			"import { DatabaseType, type FirebaseFunction, Logger, ParameterBuilder, ParameterContainer, ParameterParser, VerboseType } from 'firebase-function';",
			"import { type AuthData } from 'firebase-functions/lib/common/providers/tasks';",
			"import { checkPrerequirements } from '../checkPrerequirements';",
			"import { getCryptionKeys } from '../privateKeys';",
			"",
			"export class $1Function implements FirebaseFunction<$1Function.Parameters, $1Function.ReturnType> {",
			"\tpublic readonly parameters: $1Function.Parameters;",
			"",
			"\tprivate readonly logger: Logger;",
			"",
			"\tpublic constructor(data: unknown, auth: AuthData | undefined) {",
			"\t\tthis.logger = Logger.start(VerboseType.getFromObject(data), '$1Function.constructor', { data: data, auth: auth }, 'notice');",
			"\t\tconst parameterContainer = new ParameterContainer(data, getCryptionKeys, this.logger.nextIndent);",
			"\t\tconst parameterParser = new ParameterParser<$1Function.Parameters>(",
			"\t\t\t{",
			"\t\t\t\tdatabaseType: ParameterBuilder.build('string', DatabaseType.fromString)",
			"\t\t\t},",
			"\t\t\tthis.logger.nextIndent",
			"\t\t);",
			"\t\tparameterParser.parseParameters(parameterContainer);",
			"\t\tthis.parameters = parameterParser.parameters;",
			"\t}",
			"",
			"\tpublic async executeFunction(): Promise<$1Function.ReturnType> {",
			"\t\this.logger.log('$1Function.executeFunction', {}, 'info');",
			"\t\tawait checkPrerequirements(this.parameters, this.logger.nextIndent, 'notRequired');",
			"\t}",
			"}",
			"",
			"export namespace $1Function {",
			"\texport type Parameters = {",
			"\t\tdatabaseType: DatabaseType;",
			"\t};",
			"",
			"\texport type ReturnType = void;",
			"}",
			""
		],
		"description": "Create a new firebase function."
	}
}